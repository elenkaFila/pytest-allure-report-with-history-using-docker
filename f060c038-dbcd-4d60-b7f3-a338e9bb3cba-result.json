{"name": "test_login_in_account[test2-tes2t]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_login_page.TestLoginPage object at 0x7fa74738b920>, login = 'test2'\npassword = 'tes2t'\n\n    @pytest.mark.parametrize('login, password', [('test','test'), ('test1','test1'), ('test2','tes2t')])\n    def test_login_in_account(self, login, password):\n        self.login_page.open()\n        self.login_page.enter_login(login)\n        self.login_page.enter_password(password)\n        self.login_page.click_submit_button()\n        time.sleep(1)\n>       assert self.login_page.error_validation() == True, \"Нет ошибки валидации поля email\"\n\ntests/test_login_page.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:28: in error_validation\n    return self.element_is_present(self.ERROR_EMAIL_LOCATOR)\npages/base_page.py:27: in element_is_present\n    self.wait.until(EC.presence_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8b1b10abac4fc241422125647a774edf\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7fa746cd42c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "parameters": [{"name": "login", "value": "'test2'"}, {"name": "password", "value": "'tes2t'"}], "start": 1742754646111, "stop": 1742754658525, "uuid": "7b113671-d995-4f62-8fa4-2e414f71c919", "historyId": "5dbaf13d78eb7c483faf59b0446eafdb", "testCaseId": "dbdc955301a2223b593e85f6f082c472", "fullName": "tests.test_login_page.TestLoginPage#test_login_in_account", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "subSuite", "value": "TestLoginPage"}, {"name": "host", "value": "3dc3864a1f94"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_page"}]}